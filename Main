;nasm 2.13.02

section .bss ;variables
    command: resb 1
    input: resb 1
    output: resb 100
    input2: resb 1
    bool: resb 1
    counter: resb 1
    

section .data
    LF:     db 10    ; linefeed character
    LFLen:  equ $-LF       

section .text
	global _start

_start:
    mov edi, output ;set edi register to the value of output
    mov esi, 0 ;set esi counter register to 0
;;;;;;;;MAIN;;;;;;;;;
MAIN_LOOP:
    call INPUT_LOOP ;call input loop function
    call CHECKS ;call checks function
    call PRINT ;call print function
;;;;;;;;;;;;;;;;;;;;;

INPUT_LOOP: 
	mov eax,3           
	mov ebx,0           
	mov ecx,command     ;input one of three commands  
	mov edx,1           
	int 80h      
    
    mov [bool], byte 0 ;sets boolean value of deletion and replacement equal to 0
    cmp [command], byte '.' ;checks if the command is a period to exit out of program
    jz EXIT
    
    ret ;returns to main
    
CHECKS:
    cmp [command], byte 'A' ;checks if caommand is A
    jne CHECKONE ;if not 'A' checks next command
    call ADD ;calls addition command
    
    CHECKONE:
        cmp [command], byte 'D' ;checks if command is D
        jne CHECKTWO ;if not 'D' checks next command
        call DEL ;calls delete command
    
    CHECKTWO:
        cmp [command], byte 'R' ;checks if command is R
        jne PRINT ;if not 'R' goes to print function 
        call REPLACE ;calls replace command
 
        ret ;returns to main
        
PRINT:
        mov [counter], esi ;sets the length of the output equal to the counter
        mov edi, output ;moves output to edi register for strings
        cmp [bool], byte 0         ;jump to main loop if inputted character does not exist
        je MAIN_LOOP
 

        
        PRINT_LOOP:
        cmp [edi], byte 0 ;compares edi register to 0 skip null characters
        je SKIP ;jumps to SKIP function
        
        mov eax, 4
        mov ebx, 1
        mov ecx, edi ;outputs character of output variable
        mov edx, 1
        int 80h
  
  SKIP:
      inc edi ;moves forward output
      dec byte [counter] ;decriments counter
      jnz PRINT_LOOP ;if counter is not 0 it goes through print loop function again to output
      jmp LINEFEED_LOOP ;jumps to line feed when line is completed
 
     LINEFEED_LOOP:   ;linefeed function
        mov eax, 4
        mov ebx, 1
        mov ecx, LF
        mov edx, LFLen
        int 80h
        
        jmp MAIN_LOOP ;performs recurssion on main loop if input is not done
        
        
  ADD: 
    mov eax, 3
    mov ebx, 0
    mov ecx, input ;inputs variable to add
    mov edx, 1
    int 80h
    
    mov [bool], byte 1 ;if added, boolean equals 1
    mov al, [input] ;moves input into al reg
    mov [edi], al   ;moves input into edi reg that hold output    
    inc edi ;increments edi reg
    inc esi ;increments esi [counter] reg
    ret ;returns back to call function
    
  DEL: 
    mov eax, 3
    mov ebx, 0
    mov ecx, input ;inputs variable for deletion
    mov edx, 1
    int 80h
    
    mov ecx, 0 ;clears ecx register to 0
    
    EQUAL: ;checks if input can be found in list
    mov al, [input]
    cmp al, [output+ecx]
    jne NOTEQUAL ;goes to NOTEQUAL function if string element is not inputted variable
    mov [bool], byte 1 ;sets bool equal to zero if input exists
    mov [output+ecx], byte 0
    
    NOTEQUAL: ;increments ecx to skip over unequal element of string
        inc ecx
        cmp ecx, 100
        jle EQUAL
   
    ret ;returns to main

  REPLACE:
    mov eax, 3
    mov ebx, 0
    mov ecx, input ;inputs variable to replace
    mov edx, 1
    int 80h
    
    mov eax, 3
    mov ebx, 0
    mov ecx, input2 ;inputs replacement variable
    mov edx, 1
    int 80h
    
    mov ecx, 0 ;moves 0 to ecx register
    
    EQUAL2: ;checks if both inputs exist in the string
    mov al, [input]
    cmp al, [output+ecx]
    jne NOTEQUAL2
    mov [bool], byte 1 ;sets bool to 1
    mov al, [input2]
    mov [output+ecx], al
    
    NOTEQUAL2: ;incremeents ecx register by 1 to skip unequal characters
    inc ecx
    cmp ecx, 100
    jle EQUAL2
   
    ret ;returns to main
    
EXIT: ;exists program
	mov eax,1            ; The system call for exit (sys_exit)
	mov ebx,0            ; Exit with return code of 0 (no error)
	int 80h;
